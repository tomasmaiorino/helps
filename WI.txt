=============================================================
CONTAINERS
=============================================================
A container image is a lightweight, stand-alone, executable package of a piece of software that includes everything needed to run it: code, runtime, system tools, system libraries, settings. Available for both Linux and Windows based apps, containerized software will always run the same, regardless of the environment. Containers isolate software from its surroundings, for example differences between development and staging environments and help reduce conflicts between teams running different software on the same infrastructure. A containers virtualize the operating system instead of hardware.
Containers are an abstraction at the app layer that packages code and dependencies together. Multiple containers can run on the same machine and share the OS kernel with other containers, each running as isolated processes in user space. Containers take up less space than VMs (container images are typically tens of MBs in size), and start almost instantly.
Virtual machines (VMs) are an abstraction of physical hardware turning one server into many servers. The hypervisor allows multiple VMs to run on a single machine. Each VM includes a full copy of an operating system, one or more apps, necessary binaries and libraries - taking up tens of GBs. VMs can also be slow to boot.

=============================================================
MICROSERVICE
=============================================================
A microservice is a self contained process that provides a unique business capability.
Advantages: Is easily scalable, if we have a problem we can repair only the microservice and not all application.


=============================================================
DESIGN PATTERNS
=============================================================
It is a general repeatable solution to a commonly occurring problem is a software design.

=============================================================
DATA STRUCTURE
=============================================================
In computer science, a data structure is a particular way of organizing and storing data in a computer so that it can be accessed and modified efficiently.
More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data.[4]

--------
Array
--------
It is a data strutucture consisting in a collection of elements, each identified by at least one array index or key.
We can have a definied length array (an usual array) or a undefined length array as a java list for example.
(Element) - Each item stored in an array is called an element.
(Index) - Each location of an element in an array has a numerical index, which is used to identify the element.
Pros: A definied length array can't has its length increase. The element value can be changed easily with using an index.
When using an array list, to add a new element is an operation quite simple, unless the array need to be resized.
Cons: The elements can be accessed by an index.
Complexity:
get= O(1)
add= O(n)


------------
Linked List
------------
A linked list is a linear data structure where each element is a separate object. Each element (node) has a data and a reference to the next element. The last element
reference to null. The entry element is called HEAD. If the list is empty the head  is null.
The linked list is not a static structure, it can increase dynamically.
One disadvantage of a linked list against an array is that it does not allow direct access to the individual elements.
If you need to access a specific element you have to loop through all linked list starting from the head until to find the element needed.
Another disadvantage is that a linked list uses more memory compare with an array - we extra 4 bytes (on 32-bit CPU) to store a reference to the next node.
Types of Linked Lists:
- A singly linked list is described above
- A doubly linked list is a list that has two references, one to the next node and another to previous node
Drawbacks:
1) Random access is not allowed. We have to access elements sequentially starting from the first node. So we cannot do binary search with linked lists.
2) Extra memory space for a pointer is required with each element of the list.







High availability:
1 - fault-tolerant

1 - No single point of failure: Build redundancy in the environment at all tiers to remove single points of failure.
This tenet should be applied to both hardware and the infrastructure's software components.

2 - Failover: In the case of a failure, use load balancing to dynamically restore service to application servers.

What is circuit breaker pattern ?
